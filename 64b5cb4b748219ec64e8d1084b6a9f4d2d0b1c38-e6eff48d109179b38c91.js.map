{"version":3,"file":"64b5cb4b748219ec64e8d1084b6a9f4d2d0b1c38-e6eff48d109179b38c91.js","mappings":"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","sources":["webpack://gatsby-starter-default/./node_modules/extend/index.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/inline-style-parser/index.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/style-to-object/cjs/index.js","webpack://gatsby-starter-default/./node_modules/devlop/lib/default.js","webpack://gatsby-starter-default/./node_modules/micromark-factory-space/node_modules/micromark-util-character/index.js","webpack://gatsby-starter-default/./node_modules/micromark-factory-space/index.js","webpack://gatsby-starter-default/./node_modules/micromark-util-chunked/index.js","webpack://gatsby-starter-default/./node_modules/micromark-util-classify-character/node_modules/micromark-util-character/index.js","webpack://gatsby-starter-default/./node_modules/micromark-util-classify-character/index.js","webpack://gatsby-starter-default/./node_modules/micromark-util-normalize-identifier/index.js","webpack://gatsby-starter-default/./node_modules/micromark-util-resolve-all/index.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/estree-util-is-identifier-name/lib/index.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/hast-util-whitespace/lib/index.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/schema.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/merge.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/normalize.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/info.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/types.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/defined-info.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/create.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xlink.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xml.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xmlns.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/aria.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/html.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/svg.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/index.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/find.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/hast-to-react.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/style-to-object/esm/index.mjs","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/unist-util-position/lib/index.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/unist-util-stringify-position/lib/index.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/vfile-message/lib/index.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/lib/index.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/comma-separated-tokens/index.js","webpack://gatsby-starter-default/./node_modules/hast-util-to-jsx-runtime/node_modules/space-separated-tokens/index.js","webpack://gatsby-starter-default/./node_modules/html-url-attributes/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/mdast-util-to-string/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-util-subtokenize/lib/splice-buffer.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-util-subtokenize/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-util-combine-extensions/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-util-character/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/initialize/content.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/initialize/document.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/content.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/initialize/flow.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/initialize/text.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/create-tokenizer.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/list.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-factory-destination/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-factory-label/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-factory-title/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-factory-whitespace/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/definition.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-util-html-tag-name/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://gatsby-starter-default/./node_modules/decode-named-character-reference/index.dom.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/label-end.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/attention.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/autolink.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/html-text.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-core-commonmark/lib/code-text.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/constructs.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/parse.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/preprocess.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark-util-decode-string/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/unist-util-stringify-position/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/postprocess.js","webpack://gatsby-starter-default/./node_modules/remark-parse/lib/index.js","webpack://gatsby-starter-default/./node_modules/@ungap/structured-clone/esm/types.js","webpack://gatsby-starter-default/./node_modules/@ungap/structured-clone/esm/deserialize.js","webpack://gatsby-starter-default/./node_modules/@ungap/structured-clone/esm/serialize.js","webpack://gatsby-starter-default/./node_modules/@ungap/structured-clone/esm/index.js","webpack://gatsby-starter-default/./node_modules/micromark-util-sanitize-uri/node_modules/micromark-util-character/index.js","webpack://gatsby-starter-default/./node_modules/micromark-util-sanitize-uri/index.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/footer.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/unist-util-is/lib/index.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/unist-util-visit-parents/lib/index.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/unist-util-position/lib/index.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/revert.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://gatsby-starter-default/./node_modules/trim-lines/index.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/state.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/unist-util-visit/lib/index.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/index.js","webpack://gatsby-starter-default/./node_modules/remark-rehype/lib/index.js","webpack://gatsby-starter-default/./node_modules/react-markdown/node_modules/bail/index.js","webpack://gatsby-starter-default/./node_modules/is-plain-obj/index.js","webpack://gatsby-starter-default/./node_modules/react-markdown/node_modules/trough/lib/index.js","webpack://gatsby-starter-default/./node_modules/vfile/node_modules/unist-util-stringify-position/lib/index.js","webpack://gatsby-starter-default/./node_modules/vfile/node_modules/vfile-message/lib/index.js","webpack://gatsby-starter-default/./node_modules/vfile/lib/minpath.browser.js","webpack://gatsby-starter-default/./node_modules/vfile/lib/minproc.browser.js","webpack://gatsby-starter-default/./node_modules/vfile/lib/minurl.shared.js","webpack://gatsby-starter-default/./node_modules/vfile/lib/minurl.browser.js","webpack://gatsby-starter-default/./node_modules/vfile/lib/index.js","webpack://gatsby-starter-default/./node_modules/react-markdown/node_modules/unified/lib/callable-instance.js","webpack://gatsby-starter-default/./node_modules/react-markdown/node_modules/unified/lib/index.js","webpack://gatsby-starter-default/./node_modules/react-markdown/node_modules/unist-util-is/lib/index.js","webpack://gatsby-starter-default/./node_modules/react-markdown/node_modules/unist-util-visit-parents/lib/index.js","webpack://gatsby-starter-default/./node_modules/react-markdown/lib/index.js","webpack://gatsby-starter-default/./node_modules/react-markdown/node_modules/unist-util-visit/lib/index.js","webpack://gatsby-starter-default/./node_modules/ccount/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-gfm-autolink-literal/node_modules/micromark-util-character/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-find-and-replace/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-gfm-autolink-literal/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-gfm-footnote/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-gfm-strikethrough/lib/index.js","webpack://gatsby-starter-default/./node_modules/markdown-table/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/node_modules/unist-util-is/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/node_modules/unist-util-visit-parents/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/node_modules/mdast-util-to-string/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://gatsby-starter-default/./node_modules/mdast-util-phrasing/node_modules/unist-util-is/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-phrasing/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://gatsby-starter-default/./node_modules/longest-streak/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://gatsby-starter-default/./node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://gatsby-starter-default/./node_modules/mdast-util-gfm-table/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-gfm-task-list-item/lib/index.js","webpack://gatsby-starter-default/./node_modules/micromark-extension-gfm/node_modules/micromark-util-combine-extensions/index.js","webpack://gatsby-starter-default/./node_modules/micromark-extension-gfm-autolink-literal/node_modules/micromark-util-character/index.js","webpack://gatsby-starter-default/./node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack://gatsby-starter-default/./node_modules/micromark-extension-gfm-footnote/node_modules/micromark-util-character/index.js","webpack://gatsby-starter-default/./node_modules/micromark-extension-gfm-footnote/node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://gatsby-starter-default/./node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack://gatsby-starter-default/./node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack://gatsby-starter-default/./node_modules/micromark-extension-gfm-table/node_modules/micromark-util-character/index.js","webpack://gatsby-starter-default/./node_modules/micromark-extension-gfm-table/lib/edit-map.js","webpack://gatsby-starter-default/./node_modules/micromark-extension-gfm-table/lib/infer.js","webpack://gatsby-starter-default/./node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack://gatsby-starter-default/./node_modules/micromark-extension-gfm-task-list-item/node_modules/micromark-util-character/index.js","webpack://gatsby-starter-default/./node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack://gatsby-starter-default/./node_modules/micromark-extension-gfm/index.js","webpack://gatsby-starter-default/./node_modules/remark-gfm/lib/index.js","webpack://gatsby-starter-default/./node_modules/mdast-util-gfm/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar inline_style_parser_1 = __importDefault(require(\"inline-style-parser\"));\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nfunction StyleToObject(style, iterator) {\n    var styleObject = null;\n    if (!style || typeof style !== 'string') {\n        return styleObject;\n    }\n    var declarations = (0, inline_style_parser_1.default)(style);\n    var hasIterator = typeof iterator === 'function';\n    declarations.forEach(function (declaration) {\n        if (declaration.type !== 'declaration') {\n            return;\n        }\n        var property = declaration.property, value = declaration.value;\n        if (hasIterator) {\n            iterator(property, value, declaration);\n        }\n        else if (value) {\n            styleObject = styleObject || {};\n            styleObject[property] = value;\n        }\n    });\n    return styleObject;\n}\nexports.default = StyleToObject;\n//# sourceMappingURL=index.js.map","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// Register MDX nodes in mdast:\n/// <reference types=\"mdast-util-mdx-expression\" />\n/// <reference types=\"mdast-util-mdx-jsx\" />\n/// <reference types=\"mdast-util-mdxjs-esm\" />\n\n/**\n * @typedef {import('estree').Identifier} Identifier\n * @typedef {import('estree').Literal} Literal\n * @typedef {import('estree').MemberExpression} MemberExpression\n * @typedef {import('estree').Expression} Expression\n * @typedef {import('estree').Program} Program\n *\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpressionHast} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpressionHast} MdxTextExpression\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElementHast} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElementHast} MdxJsxTextElement\n *\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsmHast} MdxjsEsm\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('unist').Position} Position\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @callback CreateEvaluater\n *   Create an evaluator that turns ESTree ASTs from embedded MDX into values.\n * @returns {Evaluater}\n *   Evaluater.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @callback EvaluateExpression\n *   Turn an MDX expression into a value.\n * @param {Expression} expression\n *   ESTree expression.\n * @returns {unknown}\n *   Result of expression.\n *\n * @callback EvaluateProgram\n *   Turn an MDX program (export/import statements) into a value.\n * @param {Program} expression\n *   ESTree program.\n * @returns {unknown}\n *   Result of program;\n *   should likely be `undefined` as ESM changes the scope but doesn’t yield\n *   something.\n *\n * @typedef Evaluater\n *   Evaluator that turns ESTree ASTs from embedded MDX into values.\n * @property {EvaluateExpression} evaluateExpression\n *   Evaluate an expression.\n * @property {EvaluateProgram} evaluateProgram\n *   Evaluate a program.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | MdxJsxFlowElement | MdxJsxTextElement | undefined, [prop: string]: Array<Child> | Child | Element | MdxJsxFlowElement | MdxJsxTextElement | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {CreateEvaluater | null | undefined} [createEvaluater]\n *   Create an evaluator that turns ESTree ASTs into values (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {Evaluater | undefined} evaluater\n *   Evaluator that turns ESTree ASTs into values.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsm} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElement | MdxJsxTextElement} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    // @ts-expect-error: `style-to-object` types are broken.\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push[...newElements]` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events.get(lineIndex)[1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  while (++index < events.length) {\n    const token = events[index][1];\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      events.splice(index + 1, token.type === \"labelImage\" ? 4 : 2);\n      token.type = \"data\";\n      index++;\n    }\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const label = {\n    type: \"label\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  };\n  const text = {\n    type: \"labelText\",\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: Object.assign({}, events[index][1].start),\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} ToHastOptions\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(options || destination)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push([...events]);\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      events.push(...slice);\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","__importDefault","mod","__esModule","inline_style_parser_1","iterator","styleObject","default","hasIterator","forEach","ok","unreachable","regexCheck","markdownSpace","code","regex","test","String","fromCharCode","factorySpace","effects","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","splice","list","remove","items","parameters","chunkStart","from","unshift","unicodePunctuation","unicodeWhitespace","classifyCharacter","markdownLineEndingOrSpace","normalizeIdentifier","toLowerCase","toUpperCase","resolveAll","constructs","events","context","called","index","resolve","includes","nameRe","nameReJsx","emptyOptions","jsx","empty","Schema","normal","space","merge","definitions","assign","normalize","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","keys","DefinedInfo","mask","super","mark","check","values","own","create","definition","properties","info","transform","attributes","xlink","_","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","loading","loop","low","manifest","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","valid","dash","cap","kebab","$0","camelcase","hastToReact","point","pointStart","undefined","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","indexOf","parent","fatal","file","stack","actual","expected","note","url","emptyMap","Map","dashSomething","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","props","isStaticChildren","children","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","tagName","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","estree","expression","body","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","rest","dashes","find","isNaN","settings","join","padRight","padLeft","replacer","toCamel","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","computed","Boolean","optional","toDash","$1","urlAttributes","icon","includeImageAlt","includeHtml","SpliceBuffer","initial","left","right","RangeError","shift","setCursor","stop","reverse","concat","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","syntaxExtension","all","extension","hook","existing","before","add","asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","tokenize","contentStart","attempt","contentInitial","lineStart","self","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","entry","nok","document","disable","null","blankLine","after","partial","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","extensions","combineExtensions","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","$","out","unpair","Date","flags","RegExp","BigInt","deserializer","EMPTY","asString","shouldSkip","TYPE","serialize","json","lossy","strict","pair","valueOf","toJSON","entries","toISOString","serializer","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","convert","castFactory","tests","apply","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","EXIT","SKIP","visitParents","visitor","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","revert","subtype","suffix","contents","listItemLoose","tab","trimLines","last","trimLine","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","createState","footnoteById","handlers","nodes","trimMarkdownSpaceStart","handle","passThrough","shallow","unknownHandler","defaultUnknownHandler","testOrVisitor","visitorOrReverse","maybeReverse","hName","hChildren","hProperties","toHast","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","middlewareIndex","callback","output","middleware","wrapped","fnExpectsCallback","done","then","middelware","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","parse","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","unified","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","colon","questionMark","numberSign","ccount","character","findAndReplace","ignored","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","grandparent","change","matchObject","input","global","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","tracker","createTracker","move","subexit","safe","associationId","indentLines","containerFlow","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","listInScope","none","_1","unsafe","checkQuote","quote","checkEmphasis","formatHeadingAsSetext","literalWithBreak","setext","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","fence","checkFence","fences","formatCodeAsIndented","repeat","substring","longestStreak","encode","rank","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","some","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","row","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImplementation","sort","a","b","vecs","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","gfm","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown"],"sourceRoot":""}